{"version":3,"sources":["ThreeFieldForm.jsx","Form.jsx","App.js","index.js"],"names":["ThreeFieldForm","id","text","submitFunction","dateOptions","year","month","day","datePatch","Date","now","useState","date","setDate","style","display","flexDirection","paddingRight","marginRight","borderRight","selected","onChange","name","dateFormat","autoComplete","type","onClick","e","preventDefault","data","covidCases","document","getElementById","value","covidAdmissions","covidDeaths","toLocaleDateString","replaceAll","alert","className","background","Form","startingDate","setStartingDate","endingDate","setEndingDate","deleteDate","setDeleteDate","median","setMedian","mean","setMean","setCovidCases","setCovidAdmissions","setCovidDeaths","dates","setDates","labels","datasets","label","fill","backgroundColor","borderColor","data1","data2","options","scales","yAxes","ticks","beginAtZero","baseUrl","changeCharts","console","log","cases","admissions","deaths","forEach","el","push","for","paddingLeft","form","event","checked","axios","get","params","startDate","endDate","then","response","body","post","status","catch","error","put","delete","href","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b92d75bf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction ThreeFieldForm({ id, text, submitFunction }) {\r\n\r\n    const dateOptions = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    };\r\n\r\n\r\n    const datePatch = new Date(Date.now());\r\n    const [date, setDate] = useState(datePatch);\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n            <h1>{text}</h1>\r\n            <span style={{ display: \"block-inline\" }}>Date </span>\r\n            <DatePicker\r\n                selected={date}\r\n                onChange={(date) => setDate(date)}\r\n                name=\"startDate\"\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                autoComplete=\"off\"\r\n\r\n            />\r\n\r\n            <span>Covid cases</span>\r\n            <input type=\"text\" id={\"cases\" + id} />\r\n            <span>Covid admissions</span>\r\n            <input type=\"text\" id={\"admissions\" + id} />\r\n            <span>Covid deaths</span>\r\n            <input type=\"text\" id={\"deaths\" + id} /> <br></br>\r\n            <button onClick={(e) => {\r\n\r\n                e.preventDefault();\r\n                if (date) {\r\n\r\n                    let data = {\r\n                        covidCases: document.getElementById(\"cases\" + id).value,\r\n                        covidAdmissions: document.getElementById(\"admissions\" + id).value,\r\n                        covidDeaths: document.getElementById(\"deaths\" + id).value,\r\n                        date: date.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\"),\r\n                    }\r\n                    if (data.covidCases && data.covidDeaths && data.covidAdmissions) {\r\n                        submitFunction(data)\r\n                    }\r\n                    else {\r\n                        alert(\"Please put in all the data before submitting!\")\r\n                    }\r\n                } else {\r\n                    alert(\"Write in the date before submitting\")\r\n                }\r\n            }} className=\"btn\" style={{ background: \"#90ee90\" }} > Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThreeFieldForm;","import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport Grid from \"react-fast-grid\";\r\nimport DatePicker from 'react-datepicker';\r\nimport { Line } from 'react-chartjs-2';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ThreeFieldForm from \"./ThreeFieldForm\";\r\n\r\nfunction Form() {\r\n    const [startingDate, setStartingDate] = useState()\r\n    const [endingDate, setEndingDate] = useState();\r\n    const [deleteDate, setDeleteDate] = useState(new Date(Date.now()));\r\n    const dateOptions = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    };\r\n\r\n    const [median, setMedian] = useState({\r\n        covidAdmissions: 0,\r\n        covidCases: 0,\r\n        covidDeaths: 0\r\n    });\r\n    const [mean, setMean] = useState({\r\n        covidAdmissions: 0,\r\n        covidCases: 0,\r\n        covidDeaths: 0\r\n    });\r\n\r\n    const [covidCases, setCovidCases] = useState([1, 2, 3, 4])\r\n    const [covidAdmissions, setCovidAdmissions] = useState([1, 2, 3, 4])\r\n    const [covidDeaths, setCovidDeaths] = useState([1, 2, 3, 4])\r\n\r\n    const [dates, setDates] = useState([])\r\n    const data = {\r\n        labels: dates,\r\n        datasets: [\r\n            {\r\n                label: '# of Covid-19 cases',\r\n                data: covidCases,\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ]\r\n    };\r\n\r\n    const data1 = {\r\n        labels: dates,\r\n        datasets: [{\r\n            label: '# of Covid-19 admissions',\r\n            data: covidAdmissions,\r\n            fill: false,\r\n            backgroundColor: 'rgb(2, 99, 12)',\r\n            borderColor: 'rgba(2, 99, 13, 0.2)',\r\n        }]\r\n    }\r\n    const data2 = {\r\n        labels: dates,\r\n        datasets: [{\r\n\r\n            label: '# of Covid-19 deaths',\r\n            data: covidDeaths,\r\n            fill: false,\r\n            backgroundColor: 'rgb(0, 12, 200)',\r\n            borderColor: 'rgba(0, 12, 200, 0.2)',\r\n        }]\r\n    };\r\n\r\n    const options = {\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true\r\n                }\r\n            }]\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const baseUrl = \"/api\";\r\n\r\n    function createData(body) {\r\n\r\n        axios.post(baseUrl, body).then((response) => {\r\n            console.log(response)\r\n            if (response.status == 201)\r\n                alert(\"Entry created successfully at date: \" + body.date);\r\n\r\n        }).catch((error) => {\r\n            if (error.status == 401 || error.status == 403)\r\n                alert(\"That command can only be used by admins!\")\r\n            else\r\n                alert(\"An entry for date \" + body.date + \" already exists\");\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function updateData(body) {\r\n\r\n        axios.put(baseUrl + \"/\" + body.date, body).then((response) => {\r\n            console.log(response)\r\n            if (response.status == 200)\r\n                alert(\"Entry update successfully for date: \" + body.date);\r\n            else {\r\n                alert(\"Entry for date \" + body.date + \" did not exist. New entry added for date \" + body.date)\r\n            }\r\n        }\r\n        ).catch((error) => {\r\n            if (error.status == 401 || error.status == 403)\r\n                alert(\"That command can only be used by admins!\")\r\n            else\r\n                alert(\"Entry for date \" + body.date + \" does not exist\")\r\n        }\r\n        );\r\n\r\n    }\r\n    function deleteData(body) {\r\n\r\n        body = body.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\")\r\n        axios.delete(baseUrl + \"/\" + body).then((response) => {\r\n            alert(\"Entry for date \" + body + \" successfully deleted\");\r\n        }).catch((error) => {\r\n            if (error.status == 401 || error.status == 403)\r\n                alert(\"That command can only be used by admins!\")\r\n            else\r\n                alert(\"An entry for date \" + body + \" does not exist!\")\r\n        });\r\n\r\n    }\r\n    // const baseUrl = \"https://covid-tracker-cw.herokuapp.com/api\";\r\n\r\n    function submitClicked(event) {\r\n\r\n        event.preventDefault();\r\n        if (document.getElementById(\"allData\").checked) getAllData();\r\n        if (document.getElementById(\"mean\").checked) getMean();\r\n        if (document.getElementById(\"median\").checked) getMedian();\r\n    }\r\n\r\n    function getAllData() {\r\n\r\n\r\n        if (startingDate && endingDate) {\r\n\r\n            // axios({\r\n            //     headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" , 'Authorization': \"Basic c3ByaW5nYWRtaW46YWRtaW4xMjM=\" },\r\n            //     method: \"get\",\r\n            //     url: baseUrl,\r\n            //     auth: {\r\n            //       username: username,\r\n            //       password: password\r\n            //     }\r\n            //   }).then(console.log(\"hey?\")).catch(()=>{alert(\"hge\")});\r\n\r\n            axios.get(baseUrl, {\r\n                params: {\r\n                    startDate: startingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\"),\r\n                    endDate: endingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\")\r\n                }\r\n                // headers: { 'Authorization': \"Basic c3ByaW5nYWRtaW46YWRtaW4xMjM=\" }\r\n            }\r\n            ).then((response) => {\r\n                console.log(\"hey?\")\r\n                changeCharts(response.data)\r\n            })\r\n        } else {\r\n            axios.get(baseUrl).then((response) => {\r\n                console.log(response)\r\n                changeCharts(response.data)\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function changeCharts(data) {\r\n        console.log(data)\r\n        let dates = [];\r\n        let cases = [];\r\n        let admissions = [];\r\n        let deaths = [];\r\n        data.forEach((el) => {\r\n            dates.push(el.date);\r\n            cases.push(el.covidCases);\r\n            admissions.push(el.covidAdmissions);\r\n            deaths.push(el.covidDeaths);\r\n        })\r\n        setDates(dates);\r\n        setCovidCases(cases);\r\n        setCovidAdmissions(admissions);\r\n        setCovidDeaths(deaths);\r\n    }\r\n\r\n    function getMean() {\r\n        if (startingDate && endingDate) {\r\n            axios.get(baseUrl + \"/mean\", {\r\n                params: {\r\n                    startDate: startingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\"),\r\n                    endDate: endingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\")\r\n                },\r\n            }).then((response) => {\r\n                setMean(response.data);\r\n            })\r\n        } else {\r\n            axios.get(baseUrl + \"/mean\").then((response) => {\r\n                setMean(response.data);\r\n            })\r\n        }\r\n    }\r\n\r\n    function getMedian() {\r\n\r\n        if (startingDate && endingDate) {\r\n            axios.get(baseUrl + \"/median\", {\r\n                params: {\r\n                    startDate: startingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\"),\r\n                    endDate: endingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\")\r\n\r\n                }\r\n            }).then((response) => {\r\n                setMedian(response.data);\r\n            })\r\n        } else {\r\n            axios.get(baseUrl + \"/median\").then((response) => {\r\n                setMedian(response.data);\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"grid-container\">\r\n            <div className=\"grid-item grid-item-1\"\r\n            // style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"#b3e5fc\" }} className={\"col\"}\r\n            >\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n                    <h1>Read data</h1>\r\n                    <span style={{ display: \"block-inline\" }}>Starting date </span>\r\n                    <DatePicker\r\n                        selected={startingDate}\r\n                        onChange={(date) => setStartingDate(date)}\r\n                        name=\"startDate\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        autoComplete=\"off\"\r\n\r\n                    />\r\n\r\n                    <span style={{ display: \"block-inline\" }}>Ending date</span>\r\n                    <DatePicker\r\n                        selected={endingDate}\r\n                        onChange={(date) => setEndingDate(date)}\r\n                        name=\"startDate\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        autoComplete=\"off\"\r\n                    />\r\n\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"allData\" value=\"allData\" />\r\n                            <label for=\"allData\" style={{ paddingLeft: \"10px\" }}>All data</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"mean\" />\r\n                            <label for=\"mean\" style={{ paddingLeft: \"10px\" }}>Mean</label>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"checkbox\" id=\"median\" />\r\n                            <label for=\"median\" style={{ paddingLeft: \"10px\" }}>Median</label>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <button form=\"login\" onClick={submitClicked} className=\"btn\" style={{ background: \"#90ee90\" }} > Submit</button>\r\n                </div>\r\n                <ThreeFieldForm id={1} text={\"Create data\"} submitFunction={createData} ></ThreeFieldForm>\r\n                <ThreeFieldForm id={2} text={\"Update data\"} submitFunction={updateData}></ThreeFieldForm>\r\n\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n                    <h1>Delete data</h1>\r\n                    <span style={{ display: \"block-inline\" }}>Date </span>\r\n                    <DatePicker\r\n                        selected={deleteDate}\r\n                        onChange={(date) => setDeleteDate(date)}\r\n                        name=\"startDate\"\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        autoComplete=\"off\"\r\n\r\n                    />\r\n                    <br></br>\r\n                    <button form=\"login\" onClick={() => { deleteData(deleteDate) }} className=\"btn\" style={{ background: \"#90ee90\" }} > Submit</button>\r\n\r\n                </div>\r\n\r\n                <a href=\"/logout\"> <button>\r\n                    LOG OUT\r\n                </button></a>\r\n\r\n                {/* <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <form id=\"login\" onSubmit={(e) => e.preventDefault()}>\r\n                        <h5>Write the username and password in order to send a request</h5>\r\n                        <span>Username</span>\r\n                        <input type=\"text\" id=\"username\" required />\r\n                        <br></br>\r\n                        <span>Password</span>\r\n                        <input type=\"password\" id=\"password\" required />\r\n                    </form>\r\n                </div> */}\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n            <div className=\"grid-item grid-item-3\">\r\n\r\n                <div className=\"grid-item median\">\r\n\r\n                    <h1>Median:</h1>\r\n                    <p>Covid admissions: <b>{median.covidAdmissions}</b></p>\r\n                    <p>Covid cases: <b>{median.covidCases}</b></p>\r\n                    <p>Covid deaths: <b>{median.covidDeaths}</b></p>\r\n                </div>\r\n                <div className=\"grid-item mean\">\r\n                    <h1>Mean:</h1>\r\n                    <p>Covid admissions: <b>{mean.covidAdmissions}</b></p>\r\n                    <p>Covid cases: <b>{mean.covidCases}</b></p>\r\n                    <p>Covid deaths: <b>{mean.covidDeaths}</b></p>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            <div className=\"grid-item grid-item-2 cases\">\r\n                <div className='header'>\r\n                    <h4 className='title'>Covid Cases</h4>\r\n                </div>\r\n                <Line data={data} options={options} />\r\n            </div>\r\n\r\n            <div className=\"grid-item grid-item-2 admissions\">\r\n                <div className='header'>\r\n                    <h4 className='title'>Covid Admissions</h4>\r\n                </div>\r\n                <Line data={data1} options={options} />\r\n            </div>\r\n\r\n            <div className=\"grid-item grid-item-2 deaths\">\r\n                <div className='header'>\r\n                    <h4 className='title'>Covid Deaths</h4>\r\n                </div>\r\n                <Line data={data2} options={options} />\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Form;\r\n","import './App.css';\nimport Form from './Form';\n\nfunction App() {\n  return (\n    <Form> </Form>);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}